<div class="backdrop-blur-3xl p-4 rounded shadow">
  <ul id="lista-reportes" class="space-y-4 flex grid-item flex-col gap-4"></ul>
</div>
<script type="module">
  // Cargar jsPDF dinámicamente
  async function loadJsPDF() {
    if (!window.jspdf) {
      const script = document.createElement('script');
      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
      script.integrity = 'sha512-qZvrmS2ekKPF2mSznTQsxqPgnpkI4DNTlrdUmLzB9wtWPHIeakq1bR0JfNn73fL7/YjBf4IQwY8j7hZv2DdbA==';
      script.crossOrigin = 'anonymous';
      script.referrerPolicy = 'no-referrer';
      document.head.appendChild(script);
      
      return new Promise((resolve, reject) => {
        script.onload = () => resolve(window.jspdf);
        script.onerror = () => reject(new Error('Error al cargar jsPDF'));
      });
    }
    return Promise.resolve(window.jspdf);
  }

  // Esperar a que el DOM esté completamente cargado
  document.addEventListener('DOMContentLoaded', () => {
    const lista = document.getElementById("lista-reportes");
    
    function render() {
      // Usamos sessionStorage en lugar de localStorage para que los datos se borren al cerrar la pestaña
      const reportes = obtenerReportes();
      lista.innerHTML = "";
      reportes.forEach((reporte, index) => {
      const item = document.createElement("li");
      item.className =
        "border border-gray-300 dark:border-gray-600 p-1 rounded";
      item.innerHTML = ` 
        <div class="p-4 flex flex-col gap-3 rounded shadow mb-4 backdrop-blur-3xl">
          <p><strong>Tipo: </strong>${reporte.tipo}</p>
          <p><strong>Zona: </strong>${reporte.zona}</p>
          <p><strong>Descripción: </strong>${reporte.descripcion}</p>
          <p><strong>Estado: </strong>${reporte.estado}</p>
          <p><strong>Fecha: </strong>${reporte.fecha || "Sin fecha"}</p>
          <div class="mt-4 flex flex-wrap gap-3">
            <button data-editar="${index}" class="flex items-center gap-1 px-4 py-2 bg-yellow-400 hover:bg-yellow-500 text-gray-900 font-medium rounded-lg shadow-sm hover:shadow-md transition-all duration-200 ease-in-out transform hover:-translate-y-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
              </svg>
              <span>Editar</span>
            </button>
            <button data-descargar="${index}" class="flex items-center gap-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow-sm hover:shadow-md transition-all duration-200 ease-in-out transform hover:-translate-y-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
              <span>Descargar PDF</span>
            </button>
            <button data-eliminar="${index}" class="flex items-center gap-1 px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-medium rounded-lg shadow-sm hover:shadow-md transition-all duration-200 ease-in-out transform hover:-translate-y-0.5">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
              </svg>
              <span>Eliminar</span>
            </button>
          </div>
        </div>
      `;
      lista.appendChild(item);
    });
  }
  // Función para obtener los reportes actuales
  function obtenerReportes() {
    return JSON.parse(sessionStorage.getItem('reportes') || '[]');
  }

  // Función para guardar los reportes
  function guardarReportes(reportes) {
    sessionStorage.setItem('reportes', JSON.stringify(reportes));
    // Forzar actualización en otras pestañas
    const event = new StorageEvent('storage', {
      key: 'reportes',
      newValue: JSON.stringify(reportes),
      storageArea: sessionStorage
    });
    window.dispatchEvent(event);
  }

    // Escuchar cambios en el storage
    window.addEventListener('storage', (e) => {
      if (e.key === 'reportes') {
        render();
      }
    });

    // Inicializar si no existe
    if (!sessionStorage.getItem('reportes')) {
      sessionStorage.setItem('reportes', '[]');
    }
    
    // Renderizar la lista inicial
    render();
  async function generarPDF(reporte) {
    try {
      await loadJsPDF();
      
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF({
        orientation: 'p',
        unit: 'mm',
        format: 'a4'
      });
      
      try {
        // Usar una URL absoluta para el logo
        const logoUrl = new URL('/Ambicon.svg', window.location.origin).href;
        const img = new Image();
        img.crossOrigin = 'Anonymous';
        
        // Cargar la imagen SVG
        await new Promise((resolve, reject) => {
          img.onload = resolve;
          img.onerror = (e) => {
            console.error('Error al cargar el logo:', e);
            reject(e);
          };
          img.src = logoUrl;
        });
        
        // Crear un canvas con el tamaño exacto que necesitamos
        const canvas = document.createElement('canvas');
        const size = 60; // Tamaño más grande para mejor calidad
        canvas.width = size;
        canvas.height = size;
        const ctx = canvas.getContext('2d');
        
        // Configuración de máxima calidad
        ctx.imageSmoothingEnabled = true;
        ctx.imageSmoothingQuality = 'high';
        
        // Dibujar la imagen en el canvas
        ctx.drawImage(img, 0, 0, size, size);
        
        // Obtener la imagen en la mejor calidad posible
        const imgData = canvas.toDataURL('image/png', 1.0);
        
        // Agregar la imagen al PDF con la mejor calidad
        doc.addImage({
          imageData: imgData,
          x: 20,
          y: 10,
          width: 30,
          height: 30,
          compression: 'NONE',
          alias: 'logo',
          rotation: 0
        });
        
      } catch (error) {
        console.warn('No se pudo cargar el logo:', error);
        // Agregar un rectángulo como fallback
        doc.setFillColor(200, 200, 200);
        doc.rect(20, 10, 30, 30, 'F');
      }
      
      // Título del documento
      doc.setFontSize(20);
      doc.text('Reporte de Incidencia', 105, 30, { align: 'center' });
      
      // Línea divisoria
      doc.setDrawColor(200, 200, 200);
      doc.line(20, 45, 190, 45);
      
      // Contenido del reporte
      doc.setFontSize(12);
      doc.text(`• Tipo: ${reporte.tipo}`, 20, 65);
      doc.text(`• Zona: ${reporte.zona}`, 20, 75);
      doc.text(`• Estado: ${reporte.estado}`, 20, 85);
      doc.text(`• Fecha: ${reporte.fecha || 'No especificada'}`, 20, 95);
      
      // Descripción
      doc.text('Descripción:', 20, 115);
      const splitDesc = doc.splitTextToSize(reporte.descripcion, 170);
      doc.text(splitDesc, 25, 125);
      
      // Pie de página
      const fechaActual = new Date().toLocaleString();
      doc.setFontSize(10);
      doc.text(`Documento generado el: ${fechaActual}`, 20, 280);
      
      // Guardar el PDF
      doc.save(`reporte_${reporte.tipo}_${reporte.fecha || ''}.pdf`);
    } catch (error) {
      console.error('Error al generar el PDF:', error);
      alert('Error al generar el PDF. Por favor, inténtalo de nuevo.');
    }
  }
    // Agregar el event listener a la lista
    lista.addEventListener("click", (e) => {
      const button = e.target.closest('button');
      if (!button) return;

    if (button.dataset.editar !== undefined) {
      const index = parseInt(button.dataset.editar);
      window.dispatchEvent(
        new CustomEvent("editar-reporte", { detail: index })
      );
    }
    if (button.dataset.descargar !== undefined) {
      const index = parseInt(button.dataset.descargar);
      const reportes = obtenerReportes();
      
      if (index < 0 || index >= reportes.length) {
        console.error('Índice de reporte inválido para descargar');
        return;
      }
      
      const reporte = reportes[index];
      
      // Deshabilitar temporalmente el botón para evitar múltiples clics
      const boton = button;
      const textoOriginal = boton.innerHTML;
      boton.disabled = true;
      boton.innerHTML = 'Generando...';
      
      // Generar PDF
      generarPDF(reporte)
        .then(() => {
          // Restaurar el botón después de generar el PDF
          boton.disabled = false;
          boton.innerHTML = textoOriginal;
        })
        .catch(error => {
          console.error('Error al generar el PDF:', error);
          alert('Error al generar el PDF. Por favor, inténtalo de nuevo.');
          boton.disabled = false;
          boton.innerHTML = textoOriginal || 'Descargar PDF';
        });
    }
    if (button.dataset.eliminar !== undefined) {
      if (confirm('¿Estás seguro de que deseas eliminar este reporte?')) {
        const index = parseInt(button.dataset.eliminar);
        const reportes = obtenerReportes();
        
        if (index >= 0 && index < reportes.length) {
          // Crear una nueva copia del array sin el elemento a eliminar
          const nuevosReportes = reportes.filter((_, i) => i !== index);
          
          // Guardar los cambios
          guardarReportes(nuevosReportes);
          
          // Actualizar la UI
          render();
        } else {
          console.error('Índice de reporte inválido');
          alert('Error: No se pudo eliminar el reporte. Índice inválido.');
        }
      }
    }
    }); // Cierre del event listener de la lista
  }); // Cierre del DOMContentLoaded
</script>
