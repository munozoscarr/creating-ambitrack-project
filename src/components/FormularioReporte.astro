<div class=" grid-item bg-background-dark rounded-4xl relative  p-7 w-full shadow max-w-[500px] mb-4">
  <video src="/videos/4542-179384324.mp4" class="w-full blur-3xl h-full rounded-4xl absolute inset-0 -z-10 object-cover" autoplay loop muted playsinline ></video>

  <div class="w-full h-full absolute inset-0 bg-background-dark -z-[6] rounded-4xl" ></div>
  <form id="formulario-reporte" class="flex gap-8 flex-col w-full">

    <label class="flex flex-col gap-4 mb-2">
      <h2 class="text-black dark:text-white font-boldmidudev text-center">Tipo de incidente:</h2>
      <input type="text" id="tipo" class="bg-white dark:bg-gray-800 text-black dark:text-white border border-gray-300 dark:border-gray-600 p-2 w-full rounded" required />
    </label>
    <label class="flex flex-col gap-4 mb-2">
      <h2 class="text-black dark:text-white font-boldmidudev text-center">Zona:</h2>
      <input type="text" id="zona" class="bg-white dark:bg-gray-800 text-black dark:text-white border border-gray-300 dark:border-gray-600 p-2 w-full rounded" required />
    </label>
    <label class="flex flex-col gap-4 mb-2">
      <h2 class="text-black dark:text-white font-boldmidudev text-center">Descripción:</h2>
      <textarea id="descripcion" class="bg-white dark:bg-gray-800 text-black dark:text-white border border-gray-300 dark:border-gray-600 p-2 w-full rounded" required></textarea>
    </label>
    <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
      Guardar reporte
    </button>
  </form>
</div>
<script type="module">
  // Función para obtener los reportes actuales
  function obtenerReportes() {
    try {
      return JSON.parse(sessionStorage.getItem('reportes') || '[]');
    } catch (error) {
      console.error('Error al obtener reportes:', error);
      return [];
    }
  }

  // Función para guardar los reportes
  function guardarReportes(nuevosReportes) {
    try {
      sessionStorage.setItem('reportes', JSON.stringify(nuevosReportes));
      // Forzar actualización en otras pestañas
      const event = new StorageEvent('storage', {
        key: 'reportes',
        newValue: JSON.stringify(nuevosReportes),
        storageArea: sessionStorage
      });
      window.dispatchEvent(event);
    } catch (error) {
      console.error('Error al guardar reportes:', error);
    }
  }

  // Esperar a que el DOM esté completamente cargado
  document.addEventListener('DOMContentLoaded', () => {
    let reportes = obtenerReportes();
    let editIndex = null;
    const form = document.getElementById('formulario-reporte');
    const tipo = document.getElementById('tipo');
    const zona = document.getElementById('zona');
    const descripcion = document.getElementById('descripcion');

    function guardarReporte(reporte) {
      reportes.push(reporte);
      guardarReportes(reportes);
    }

    function limpiarFormulario() {
      tipo.value = '';
      zona.value = '';
      descripcion.value = '';
      editIndex = null;
    }

    function validarFormulario() {
      if (!tipo.value.trim() || !zona.value.trim() || !descripcion.value.trim()) {
        alert('Por favor completa todos los campos');
        return false;
      }
      return true;
    }

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      if (!validarFormulario()) return;
      
      const nuevoReporte = {
        tipo: tipo.value.trim(),
        zona: zona.value.trim(),
        descripcion: descripcion.value.trim(),
        estado: "En revisión",
        fecha: new Date().toISOString()
      };

      try {
        // Obtener reportes actuales
        reportes = obtenerReportes();
        
        if (editIndex !== null) {
          // Actualizar reporte existente
          reportes[editIndex] = nuevoReporte;
        } else {
          // Agregar nuevo reporte
          reportes.push(nuevoReporte);
        }
        
        // Guardar cambios
        guardarReportes(reportes);
        
        // Limpiar formulario
        limpiarFormulario();
        
        // Notificar que se actualizó la lista
        window.dispatchEvent(new Event('reporte-actualizado'));
        
      } catch (error) {
        console.error('Error al guardar el reporte:', error);
        alert('Ocurrió un error al guardar el reporte');
      }
    });

    // Escuchar evento personalizado para editar desde ListaReportes
    window.addEventListener('editar-reporte', (e) => {
      try {
        const index = e.detail;
        reportes = obtenerReportes(); // Actualizar lista de reportes
        
        if (index >= 0 && index < reportes.length) {
          const r = reportes[index];
          tipo.value = r.tipo || '';
          zona.value = r.zona || '';
          descripcion.value = r.descripcion || '';
          editIndex = index;
          
          // Hacer scroll al formulario para mejor experiencia de usuario
          form.scrollIntoView({ behavior: 'smooth' });
        } else {
          console.error('Índice de edición inválido:', index);
        }
      } catch (error) {
        console.error('Error al cargar el reporte para edición:', error);
      }
    });
    
    // Inicializar con reportes actuales
    reportes = obtenerReportes();
  });
</script>